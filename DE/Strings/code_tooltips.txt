@code_tooltip_harvest = `harvest()`
Erntet die Entität unter der Drohne.
Wenn du eine Entität erntest, die nicht geerntet werden kann, wird sie zerstört.

gibt `True` zurück, wenn eine Entität entfernt wurde, andernfalls `False`.

dauert `200` Ticks, wenn eine Entität entfernt wurde, andernfalls `1` Tick.

Beispiel:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
Wird verwendet, um herauszufinden, ob Pflanzen ausgewachsen sind.

gibt `True` zurück, wenn sich unter der Drohne eine erntereife Entität befindet, andernfalls `False`.

dauert `1` Tick.

Beispiel:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
Erzeugt eine Sequenz von Zahlen, die bei `start` beginnt, kurz vor `end` endet (`end` ist also ausgeschlossen) und Schritte der Größe `step` verwendet.

Beachte, dass `start` standardmäßig auf `0` gesetzt ist, und wenn nur ein Argument angegeben wird, wird es an `end` gebunden. Normalerweise ist das nicht möglich.
In Python ist `range` ein Klassenkonstruktor, der dieses seltsame Verhalten ermöglicht.

dauert `1` Tick.

Beispiel:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
Verbraucht die Kosten der angegebenen `entity` und pflanzt sie unter der Drohne.
Schlägt fehl, wenn du dir die Pflanze nicht leisten kannst, der Bodentyp falsch ist oder dort bereits eine Pflanze wächst.

gibt `True` zurück, wenn es erfolgreich war, andernfalls `False`.

dauert `200` Ticks bei Erfolg, andernfalls `1` Tick.

Beispiel:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
Bewegt die Drohne um ein Feld in die angegebene `direction`.
Wenn die Drohne über den Rand der Farm fliegt, erscheint sie auf der anderen Seite wieder.

`East `  =  rechts
`West `  =  links
`North`  =  oben
`South`  =  unten

gibt `True` zurück, wenn sich die Drohne bewegt hat, andernfalls `False`.

dauert `200` Ticks, wenn sich die Drohne bewegt hat, andernfalls `1` Tick.

Beispiel:
`move(North)`
@code_tooltip_can_move = `can_move(direction)`
Überprüft, ob sich die Drohne in die angegebene `direction` bewegen kann.

gibt `True` zurück, wenn sich die Drohne bewegen kann, andernfalls `False`.

dauert `1` Tick.

Beispiel:
`if can_move(North):
    move(North)`
@code_tooltip_swap = `swap(direction)`
Tauscht die Entität unter der Drohne mit der Entität neben der Drohne in der angegebenen `direction`.
Funktioniert nicht bei allen Entitäten.
Funktioniert auch, wenn eine (oder beide) der Entitäten `None` sind.

gibt `True` zurück, wenn es erfolgreich war, andernfalls `False`.

dauert `200` Ticks bei Erfolg, andernfalls `1` Tick.

Beispiel:
`swap(North)`
@code_tooltip_till = `till()` 
Pflügt den Boden unter der Drohne zu `Grounds.Soil`. Wenn es bereits Erde ist, wird der Boden wieder zu `Grounds.Grassland`.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
Gibt die aktuelle x-Position der Drohne zurück.
Die x-Position beginnt bei `0` im Westen und steigt in Richtung Osten an.

gibt eine Zahl zurück, die die aktuelle x-Koordinate der Drohne darstellt.

dauert `1` Tick.

Beispiel:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
Gibt die aktuelle y-Position der Drohne zurück.
Die y-Position beginnt bei `0` im Süden und steigt in Richtung Norden an.

gibt eine Zahl zurück, die die aktuelle y-Koordinate der Drohne darstellt.

dauert `1` Tick.

Beispiel:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
Gibt die aktuelle Größe der Farm zurück.

gibt die Seitenlänge des Gitters in Nord-Süd-Richtung zurück.

dauert `1` Tick.

Beispiel:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
Findet heraus, welche Art von Entität sich unter der Drohne befindet.

gibt `None` zurück, wenn das Feld leer ist, andernfalls den Typ der Entität unter der Drohne.

dauert `1` Tick.

Beispiel:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
Findet heraus, welche Art von Boden sich unter der Drohne befindet.

gibt den Typ des Bodens unter der Drohne zurück.

dauert `1` Tick.

Beispiel:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
Gibt die aktuelle Spielzeit zurück.

gibt die Zeit in Sekunden seit Spielbeginn zurück.

dauert `1` Tick.

Beispiel:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
Wird verwendet, um die Anzahl der durchgeführten Ticks zu messen.

gibt die Anzahl der seit Beginn der Ausführung durchgeführten Ticks zurück.

dauert `0` Ticks.

Beispiel:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
Versucht, den angegebenen `item` `n`-mal zu verwenden. Kann nur mit einigen Items verwendet werden, einschließlich `Items.Water` und `Items.Fertilizer`.

gibt `True` zurück, wenn ein Item verwendet wurde, andernfalls `False`.

dauert `200` Ticks bei Erfolg, andernfalls `1` Tick.

Beispiel:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
Gibt den aktuellen Wasserstand unter der Drohne zurück.

gibt den Wasserstand unter der Drohne als Zahl zwischen `0` und `1` zurück.

dauert `1` Tick.

Beispiel:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()` 
Lässt die Drohne einen Salto machen! Diese Aktion wird nicht von Geschwindigkeits-Upgrades beeinflusst.

gibt `None` zurück

dauert 1s.

Beispiel:
`while True:
    do_a_flip()`
@code_tooltip_pet_the_piggy = `pet_the_piggy()` 
Streichle das Schweinchen! Diese Aktion wird nicht von Geschwindigkeits-Upgrades beeinflusst.

gibt `None` zurück

dauert 1s.

Beispiel:
`while True:
    pet_the_piggy()`
@code_tooltip_print = `print(*args)` 
Druckt alle `args` mit Rauch in die Luft über der Drohne. Diese Aktion wird nicht von Geschwindigkeits-Upgrades beeinflusst.
Es können mehrere Werte auf einmal gedruckt werden.

gibt `None` zurück

dauert 1s.

Beispiel:
`print("ground:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
Gibt die Anzahl der Elemente in einer Liste, einem Set, einem Dict oder einem Tupel zurück.

gibt die Länge der `collection` zurück.

dauert `1` Tick.

Beispiel:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
Erstellt eine neue Liste.
Wenn `collection` None ist, wird eine leere Liste erstellt.
Wenn `collection` eine Sequenz ist, wird eine neue Liste mit den Elementen der Sequenz erstellt.

gibt eine Liste zurück.

dauert `1 + len(collection)` Ticks.

Beispiel:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
Erstellt ein neues Dictionary.
Wenn `dictionary` None ist, wird ein leeres Dictionary erstellt.
Wenn `dictionary` ein Dictionary ist, wird eine Kopie davon erstellt.

gibt ein Dictionary zurück.

dauert `1 + len(dictionary)` Ticks.

Beispiel:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`
Erstellt ein neues Set.
Wenn `collection` None ist, wird ein leeres Set erstellt.
Wenn `collection` eine Sammlung von Werten ist, wird ein neues Set mit diesen Werten erstellt.

gibt ein Set zurück.

dauert `1 + len(collection)` Ticks.

Beispiel:
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

gibt eine String-Darstellung von `object` zurück.

dauert `1` Tick.

Beispiel:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
Begrenzt die Geschwindigkeit, mit der das Programm ausgeführt wird, um besser zu sehen, was passiert.

Eine `speed` von `1` ist die Geschwindigkeit, die die Drohne ohne Geschwindigkeits-Upgrades hat.
Eine `speed` von `10` lässt den Code `10` Mal schneller ausführen und entspricht der Geschwindigkeit der Drohne nach `9` Geschwindigkeits-Upgrades.
Eine `speed` von `0.5` lässt den Code mit der halben Geschwindigkeit ohne Geschwindigkeits-Upgrades ausführen. Das kann nützlich sein, um zu sehen, was der Code tut.

Wenn `speed` schneller ist, als die Ausführung aktuell sein kann, wird sie einfach mit maximaler Geschwindigkeit ausgeführt.

Wenn `speed` `0` oder negativ ist, wird die Geschwindigkeit wieder auf die maximale Geschwindigkeit zurückgesetzt.
Der Effekt endet auch, wenn die Ausführung stoppt.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
Begrenzt die Größe der Farm, um besser zu sehen, was passiert.
Leert auch die Farm und setzt die Drohnenposition zurück.
Setzt die Farm auf ein `size` x `size` Gitter.
Die kleinstmögliche `size` ist `3`.
Eine `size` kleiner als `3` setzt das Gitter auf seine volle Größe zurück.
Der Effekt endet auch, wenn die Ausführung stoppt.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
Findet heraus, wie viel von `item` du aktuell hast.

gibt die Anzahl von `item` zurück, die sich aktuell in deinem Inventar befindet.

dauert `1` Tick.

Beispiel:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
Gibt die Kosten für ein `thing` zurück.

Wenn `thing` eine Entität ist, gibt es die Kosten für das Pflanzen zurück.
Wenn `thing` eine Freischaltung ist, gibt es die Kosten für das Freischalten zurück.

gibt ein Dictionary zurück, mit Items als Keys und Zahlen als Values. Jedes Item wird auf die benötigte Menge abgebildet.
gibt `{}` zurück, wenn es auf eine verbesserbare Freischaltung angewendet wird, die bereits auf dem maximalen Level ist.

dauert `1` Tick.

Beispiel:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("not enough items to unlock carrots")`
@code_tooltip_clear = `clear()` 
Entfernt alles von der Farm, bewegt die Drohne zurück zur Position `(0,0)` und wechselt den Hut zurück zum Strohhut.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`clear()`
@code_tooltip_get_companion = `get_companion()` 
Gibt die bevorzugte Begleitpflanze der Pflanze unter der Drohne zurück.

gibt ein Tupel der Form `(companion_type, (companion_x_position, companion_y_position))` zurück

dauert `1` Tick.

Beispiel:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
Hat genau den gleichen Effekt wie das Klicken auf den Button, der `unlock` im Forschungsbaum entspricht.

gibt `True` zurück, wenn die Freischaltung erfolgreich war, andernfalls `False`.

dauert `200` Ticks bei Erfolg, andernfalls `1` Tick.

Beispiel:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
Wird verwendet, um zu prüfen, ob eine Freischaltung, eine Entität, ein Boden oder ein Item bereits freigeschaltet ist.

gibt `1` plus die Anzahl der Upgrades von `thing` zurück, falls `thing` verbesserbar ist. Andernfalls gibt es `1` zurück, wenn `thing` freigeschaltet ist, sonst `0`.

dauert `1` Tick.

Beispiel:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
Setzt die Farm auf ein 1x1-Feld zurück, entfernt alle Ressourcen und sperrt die meisten Freischaltungen.
Dein Code wird dabei nicht entfernt.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
Kann bei einigen Entitäten bestimmte Werte messen. Der Effekt hängt von der Entität ab.

Wenn `direction` nicht `None` ist, wird die benachbarte Entität in der angegebenen Richtung gemessen.

gibt die Anzahl der Blütenblätter einer Sonnenblume zurück.
gibt die nächste Position für einen Schatz oder Apfel zurück.
gibt die Größe eines Kaktus zurück.
gibt eine mysteriöse Zahl für einen Kürbis zurück.
gibt `None` für alle anderen Entitäten zurück.

dauert `1` Tick.

Beispiel:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`
Startet eine zeitgesteuerte Simulation für das `leaderboard` und verwendet die angegebene `file_name` als Ausgangspunkt.
`speedup` legt die anfängliche Beschleunigung fest.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
Startet eine Simulation für die Bestenliste und verwendet den angegebenen `filename` als Ausgangspunkt.

`sim_unlocks`: Eine Sequenz, die die anfänglichen Freischaltungen enthält.
`sim_items`: Ein Dict, das Items auf Mengen abbildet. Die Simulation startet mit diesen Items.
`sim_globals`: Ein Dict, das Variablennamen auf Werte abbildet. Die Simulation startet mit diesen Variablen im globalen Geltungsbereich.
`seed`: Der Zufalls-Seed der Simulation. Muss eine positive ganze Zahl sein.
`speedup`: Die anfängliche Beschleunigung.

gibt die Zeit zurück, die für die Ausführung der Simulation benötigt wurde.

dauert `200` Ticks.

Beispiel:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_spawn_drone = `spawn_drone(filename)`
Spawnt eine neue Drohne an der gleichen Position wie die Drohne, die den Befehl `spawn_drone(function)` ausgeführt hat. Die neue Drohne beginnt dann mit der Ausführung der angegebenen Funktion. Danach verschwindet sie automatisch.

gibt den Handle der neuen Drohne zurück oder `None`, wenn bereits alle Drohnen gespawnt sind.

dauert `200` Ticks, wenn eine Drohne gespawnt wurde, sonst `1`.

Beispiel:
`def harvest_column():
    for _ in range(get_world_size()):
        harvest()
        move(North)

while True:
    if spawn_drone(harvest_column):
        move(East)`
@code_tooltip_wait_for = `wait_for(drone)`
Wartet, bis die angegebene `drone` beendet ist.

gibt den Rückgabewert der Funktion zurück, die die `drone` ausgeführt hat.

dauert `1` Tick, wenn die erwartete `drone` bereits fertig ist.

Beispiel:
`def get_entity_type_in_direction(dir):
    move(dir)
    return get_entity_type()

def zero_arg_wrapper():
    return get_entity_type_in_direction(North)
handle = spawn_drone(zero_arg_wrapper)
print(wait_for(handle))`
@code_tooltip_has_finished = `has_finished(drone)`
Überprüft, ob die angegebene Drohne fertig ist.

gibt `True` zurück, wenn die Drohne fertig ist, andernfalls `False`.

dauert `1` Tick.

Beispiel:
`drone = spawn_drone(function)
while not has_finished(drone):
    do_something_else()
result = wait_for(drone)`
@code_tooltip_max_drones = `max_drones()`

gibt die maximale Anzahl von Drohnen zurück, die du auf der Farm haben kannst.

dauert `1` Tick.

Beispiel:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_num_drones = `num_drones()`

gibt die aktuelle Anzahl von Drohnen auf der Farm zurück.

dauert `1` Tick.

Beispiel:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`
@code_tooltip_quick_print = `quick_print(*args)`
Druckt einen Wert genau wie `print(*args)`, hält aber nicht an, um ihn in die Luft zu schreiben, sodass er nur auf der Ausgabeseite zu finden ist.

gibt `None` zurück

dauert `0` Ticks.

Beispiel:
`quick_print("hi mom")`
@code_tooltip_change_hat = `change_hat(hat)`
Ändert den Hut der Drohne zu `hat`.

gibt `None` zurück

dauert `200` Ticks.

Beispiel:
`change_hat(Hats.Dinosaur_Hat)`
@code_tooltip_max = `max(*args)`
Gibt das Maximum einer Sequenz von Elementen oder mehrerer übergebener Argumente zurück.
Kann auf Zahlen und Strings angewendet werden.

`max(a,b,c)`: Gibt das Maximum von `a`, `b` und `c` zurück.
`max(sequence)`: Gibt das Maximum aller Werte in einer Sequenz zurück.

dauert #Vergleiche Ticks.

Beispiel:
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
Gibt das Minimum einer Sequenz von Elementen oder mehrerer übergebener Argumente zurück.
Kann auf Zahlen und Strings angewendet werden.

`min(a,b,c)`: Gibt das Minimum von `a`, `b` und `c` zurück.
`min(sequence)`: Gibt das Minimum aller Werte in einer Sequenz zurück.

dauert #Vergleiche Ticks.

Beispiel:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
Berechnet den Absolutwert einer Zahl.

gibt `number` zurück, wenn `number` positiv ist, andernfalls `-number`.

dauert 1 Tick.

Beispiel:
`abs(-69)`
@code_tooltip_random = `random()`
Ermittelt eine Zufallszahl zwischen 0 (inklusiv) und 1 (exklusiv).

gibt die Zufallszahl zurück.

dauert `1` Tick.

Beispiel:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
Fügt `element` am Ende der `list` hinzu.

gibt `None` zurück

dauert `1` Tick.

Beispiel:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
Fügt `element` zum `set` hinzu.

gibt `None` zurück

dauert `element size` Ticks.

Beispiel:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
Entfernt das erste Vorkommen von `element` aus der `collection`.

gibt `None` zurück

dauert `element size` Ticks bei einem Set, #Vergleiche + #Verschiebungen Ticks bei einer Liste.

Beispiel:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
Entfernt das letzte Element aus einer Liste oder das angegebene Element aus einem Dictionary.
`list.pop(i)` entfernt das Element am Index `i` aus der `list`.

gibt das entfernte Element zurück

dauert `key size` Ticks bei einem Dictionary, `len(list) - i + 1` Ticks bei einer Liste.

Beispiel:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
Fügt `element` an der Stelle `i` in die `list` ein.

gibt `None` zurück

dauert `len(list) - i + 1` Ticks.

Beispiel:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = Enthält alle Items, die im Inventar sein können. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_Entities = Enthält alle Pflanzentypen. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_Grounds = Enthält alle möglichen Bodentypen. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_Unlocks = Enthält alle Freischaltungen und Upgrades im Forschungsmenü. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_Hats = Enthält alle Huttypen. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_Leaderboards = Enthält alle Kategorien der Bestenliste. Kann mit einer `for`-Schleife durchlaufen werden.
@code_tooltip_for = Eine Schleife, die über alle Elemente einer Sequenz iteriert. Einige Programmiersprachen nennen dies eine "foreach"-Schleife.
@code_tooltip_while = Wird so lange wiederholt, bis die Bedingung falsch ist.
@code_tooltip_def = Definiert eine Funktion.
@code_tooltip_True = Ein boolescher Wert, der immer wahr ist.
@code_tooltip_False = Ein boolescher Wert, der immer falsch ist.
@code_tooltip_if = Führt Code aus, wenn die Bedingung `True` ist.
@code_tooltip_else = Führt Code aus, wenn die vorherige `if`-Bedingung `False` war.
@code_tooltip_elif = Macht dasselbe wie:
`else:
    if condition:`
@code_tooltip_None = Ein Wert, der darstellt, dass es keinen Wert gibt.
@code_tooltip_continue = Fährt sofort mit der nächsten Schleifeniteration fort. Bei verschachtelten Schleifen betrifft dies immer die innerste Schleife.
@code_tooltip_break = Bricht aus einer Schleife aus und führt die Anweisungen nach der Schleife weiter aus. Bei verschachtelten Schleifen betrifft dies immer die innerste Schleife.
@code_tooltip_North = Die Richtung nach oben auf dem Bildschirm. Es sei denn, du drehst deinen Bildschirm um.
@code_tooltip_East = Die Richtung nach rechts auf dem Bildschirm. Es sei denn, du drehst deinen Bildschirm um.
@code_tooltip_South = Die Richtung nach unten auf dem Bildschirm. Es sei denn, du drehst deinen Bildschirm um.
@code_tooltip_West = Die Richtung nach links auf dem Bildschirm. Es sei denn, du drehst deinen Bildschirm um.
@code_tooltip_not = `not True` ist `False` und `not False` ist `True`.
@code_tooltip_and = Wertet den ersten Operanden aus. Wenn er "falsy" ist (`False`, `0` und leere Sammlungen), wird dieser Wert sofort zurückgegeben (Kurzschlussauswertung), andernfalls wird der zweite Operand ausgewertet und zurückgegeben.
@code_tooltip_or = Wertet den ersten Operanden aus. Wenn er "truthy" ist (alles andere als `False`, `0` und leere Sammlungen), wird dieser Wert sofort zurückgegeben (Kurzschlussauswertung), andernfalls wird der zweite Operand ausgewertet und zurückgegeben.
@code_tooltip_return = Wird verwendet, um einen Wert aus einer Funktion zurückzugeben.
@code_tooltip_pass = Tut nichts. Kann nützlich sein, da leere Codeblöcke nicht erlaubt sind.