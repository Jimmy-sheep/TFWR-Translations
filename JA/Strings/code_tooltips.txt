@code_tooltip_harvest = `harvest()`
ドローンの下にあるエンティティを収穫します。
収穫できないエンティティを収穫しようとすると、それは破壊されます。

エンティティが取り除かれた場合は `True` を、それ以外の場合は `False` を返します。

エンティティが取り除かれた場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`harvest()`
@code_tooltip_can_harvest = `can_harvest()`
植物が完全に成長したかどうかを調べるために使用します。

ドローンの下に収穫可能なエンティティがある場合は `True` を、それ以外の場合は `False` を返します。

実行に `1` ティックかかります。

例:
`if can_harvest():
    harvest()`
@code_tooltip_range = `range(start = 0, end, step = 1)`
`start` から始まり、`end` に到達する直前まで（つまり `end` は含まれない） `step` のサイズで増加する数値のシーケンスを生成します。

`start` はデフォルトで `0` に設定されており、引数が1つだけ与えられた場合、その値は `end` に割り当てられます。通常、この使い方はできません。
Pythonにおいて、`range` はこの奇妙な動作を可能にするクラスコンストラクターです。

実行に `1` ティックかかります。

例:
`for i in range(10):
    print(i)

for i in range(2,6):
    print(i)

for i in range(10, 0, -1):
    print(i)`
@code_tooltip_plant = `plant(entity)` 
指定された `entity` のコストを消費し、ドローンの下に植えます。
コストが足りない場合、地面の種類が違う場合、またはすでに植物がそこにある場合は失敗します。

成功した場合は `True` を、それ以外の場合は `False` を返します。

成功した場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`plant(Entities.Bush)`
@code_tooltip_move = `move(direction)`
ドローンを指定された `direction` に1タイル移動させます。
ドローンが農場の端を越えて移動すると、農場の反対側に戻ります。

`East `  =  右
`West `  =  左
`North`  =  上
`South`  =  下

ドローンが移動した場合は `True` を、それ以外の場合は `False` を返します。

ドローンが移動した場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`move(North)`
@code_tooltip_can_move = `can_move(direction)`
ドローンが指定された `direction` に移動できるかチェックします。

ドローンが移動できる場合は `True` を、それ以外の場合は `False` を返します。

実行に `1` ティックかかります。

例:
`if can_move(North):
    move(North)`
@code_tooltip_swap = `swap(direction)`
ドローンの下のエンティティと、指定された `direction` の隣にあるエンティティを入れ替えます。
すべてのエンティティで機能するわけではありません。
エンティティの一方（または両方）が `None` の場合でも機能します。

成功した場合は `True` を、それ以外の場合は `False` を返します。

成功した場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`swap(North)`
@code_tooltip_till = `till()` 
ドローンの下の地面を `Grounds.Soil` に耕します。すでに土の場合は、地面を `Grounds.Grassland` に戻します。

`None` を返します。

実行に `200` ティックかかります。

例:
`till()`
@code_tooltip_get_pos_x = `get_pos_x()` 
ドローンの現在のx座標を取得します。
x座標は西端の `0` から始まり、東に向かって増加します。

ドローンの現在のx座標を表す数値を返します。

実行に `1` ティックかかります。

例:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_pos_y = `get_pos_y()` 
ドローンの現在のy座標を取得します。
y座標は南端の `0` から始まり、北に向かって増加します。

ドローンの現在のy座標を表す数値を返します。

実行に `1` ティックかかります。

例:
`x, y = get_pos_x(), get_pos_y()`
@code_tooltip_get_world_size = `get_world_size()` 
現在の農場のサイズを取得します。

南北方向のグリッドの一辺の長さを返します。

実行に `1` ティックかかります。

例:
`for i in range(get_world_size()):
    move(North)`
@code_tooltip_get_entity_type = `get_entity_type()` 
ドローンの下にどんな種類のエンティティがあるかを調べます。

タイルが空の場合は `None` を返し、それ以外の場合はドローンの下のエンティティの種類を返します。

実行に `1` ティックかかります。

例:
`if get_entity_type() == Entities.Grass:
    harvest()`
@code_tooltip_get_ground_type = `get_ground_type()` 
ドローンの下がどんな種類の地面かを調べます。

ドローンの下の地面の種類を返します。

実行に `1` ティックかかります。

例:
`if get_ground_type() != Grounds.Soil:
    till()`
@code_tooltip_get_time = `get_time()` 
現在のゲーム時間を取得します。

ゲーム開始からの経過時間を秒単位で返します。

実行に `1` ティックかかります。

例:
`start = get_time()

do_something()

time_passed = get_time() - start`
@code_tooltip_get_tick_count = `get_tick_count()`
実行されたティック数を測定するために使用します。

実行開始から実行されたティック数を返します。

実行に `0` ティックかかります。

例:
`do_something()

print(get_tick_count())`
@code_tooltip_use_item = `use_item(item, n=1)` 
指定された `item` の使用を `n` 回試みます。`Items.Water`、`Items.Fertilizer` などの一部のアイテムでのみ使用できます。

アイテムが使用された場合は `True` を、それ以外の場合は `False` を返します。

成功した場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`use_item(Items.Fertilizer)`
@code_tooltip_get_water = `get_water()` 
ドローンの下の現在の水位を取得します。

ドローンの下の水位を `0` から `1` までの数値で返します。

実行に `1` ティックかかります。

例:
`if get_water() < 0.5:
    use_item(Items.Water)`
@code_tooltip_do_a_flip = `do_a_flip()` 
ドローンが宙返りをします！このアクションはスピードアップグレードの影響を受けません。

`None`を返します。

実行に1秒かかります。

例:
`while True:
    do_a_flip()`
@code_tooltip_pet_the_piggy = `pet_the_piggy()` 
子ブタをなでます！このアクションはスピードアップグレードの影響を受けません。

`None`を返します。

実行に1秒かかります。

例:
`while True:
    pet_the_piggy()`
@code_tooltip_print = `print(*args)` 
ドローンの上の空中に、煙を使ってすべての `args` を表示します。このアクションはスピードアップグレードの影響を受けません。
複数の値を一度に表示できます。

`None`を返します。

実行に1秒かかります。

例:
`print("地面:", get_ground_type())`
@code_tooltip_len = `len(collection)` 
リスト、セット、辞書、またはタプルの要素数を取得します。

`collection` の長さを返します。

実行に `1` ティックかかります。

例:
`for i in range(len(list)):
    list[i] += 1`
@code_tooltip_list = `list(collection = None)`
新しいリストを作成します。
`collection` が `None` の場合、空のリストを作成します。
`collection` がシーケンスの場合、そのシーケンスの要素を持つ新しいリストを作成します。

リストを返します。

実行に `1 + len(collection)` ティックかかります。

例:
`new_list = list((1,2,3))`
@code_tooltip_dict = `dict(dictionary = None)`
新しい辞書を作成します。
`dictionary` が `None` の場合、空の辞書を作成します。
`dictionary` が辞書の場合、そのコピーを作成します。

辞書を返します。

実行に `1 + len(dictionary)` ティックかかります。

例:
`new_dict = dict()`
@code_tooltip_set = `set(collection = None)`
新しいセットを作成します。
`collection` が `None` の場合、空のセットを作成します。
`collection` が値のコレクションの場合、それらの値を含む新しいセットを作成します。

セットを返します。

実行に `1 + len(collection)` ティックかかります。

例:
`new_set = set((1,2,3))`
@code_tooltip_str = `str(object)`

`object` の文字列表現を返します。

実行に `1` ティックかかります。

例:
`string = str(1000)`
@code_tooltip_set_execution_speed = `set_execution_speed(speed)`
何が起こっているかをよりよく見るために、プログラムの実行速度を制限します。

`speed` が `1` の場合、スピードアップグレードなしのドローンの速度になります。
`speed` が `8` の場合、コードの実行速度が `8` 倍になり、`3` 回のスピードアップグレード後のドローンの速度に対応します。
`speed` が `0.5` の場合、コードはスピードアップグレードなしの半分の速度で実行されます。これは、コードが何をしているかを確認するのに役立ちます。

`speed` が現在の実行速度よりも速い場合、最大速度で実行されます。

`speed` が `0` または負の場合、速度は最大速度に戻ります。
この効果は実行が停止すると終了します。

`None` を返します。

実行に `200` ティックかかります。

例:
`set_execution_speed(1)`
@code_tooltip_set_world_size = `set_world_size(size)`
何が起こっているかをよりよく見るために、農場のサイズを制限します。
また、農場をクリアし、ドローンの位置をリセットします。
農場を `size` x `size` のグリッドに設定します。
可能な最小の `size` は `3` です。
`size` が `3` 未満の場合、グリッドは元のフルサイズに戻ります。
この効果は実行が停止すると終了します。

`None` を返します。

実行に `200` ティックかかります。

例:
`set_world_size(5)`
@code_tooltip_num_items = `num_items(item)` 
現在所持している `item` の数量を調べます。

インベントリにある `item` の数を返します。

実行に `1` ティックかかります。

例:
`if num_items(Items.Fertilizer) > 0:
    use_item(Items.Fertilizer)`
@code_tooltip_get_cost = `get_cost(thing)` 
`thing` のコストを取得します。

`thing` がエンティティの場合、それを植えるコストを取得します。
`thing` がアンロックの場合、それをアンロックするコストを取得します。

アイテムをキー、数値を値とする辞書を返します。各アイテムは必要量でマッピングされます。
すでに最大レベルのアップグレード可能なアンロックに使用した場合、`{}` を返します。

実行に `1` ティックかかります。

例:
`cost = get_cost(Unlocks.Carrots)
for item in cost:
    if num_items(item) < cost[item]:
        print("ニンジンをアンロックするためのアイテムが足りません")`
@code_tooltip_clear = `clear()` 
農場からすべてを取り除き、ドローンを `(0,0)` の位置に戻し、帽子を麦わら帽子に戻します。

`None` を返します。

実行に `200` ティックかかります。

例:
`clear()`
@code_tooltip_get_companion = `get_companion()` 
ドローンの下の植物と相性の良い植物（コンパニオンプラント）を取得します。

`(companion_type, (companion_x_position, companion_y_position))` の形式のタプルを返します。

実行に `1` ティックかかります。

例:
`companion = get_companion()
if companion != None:
	print(companion)`
@code_tooltip_unlock = `unlock(unlock)` 
研究ツリーで `unlock` に対応するボタンをクリックするのとまったく同じ効果があります。

アンロックが成功した場合は `True` を、それ以外の場合は `False` を返します。

成功した場合は `200` ティック、それ以外の場合は `1` ティックかかります。

例:
`unlock(Unlocks.Carrots)`
@code_tooltip_num_unlocked = `num_unlocked(thing)`
アンロック、エンティティ、地面、アイテム、または帽子がすでにアンロックされているかを確認するために使用します。

`thing` がアップグレード可能な場合、`thing` がアップグレードされた回数に `1` を加えた値を返します。それ以外の場合、`thing` がアンロックされていれば `1` を、そうでなければ `0` を返します。

実行に `1` ティックかかります。

例:
`plant(Entities.Bush)
n_substance = get_world_size() * num_unlocked(Unlocks.Mazes)
use_item(Items.Weird_Substance, n_substance)`
@code_tooltip_reset = `reset()` 
農場を1x1の正方形に戻し、すべての資源を取り除き、ほとんどのアンロックをロックします。
コードは削除されません。

`None` を返します。

実行に `200` ティックかかります。

例:
`reset()`
@code_tooltip_measure = `measure(direction = None)` 
一部のエンティティでいくつかの値を測定できます。この効果はエンティティによって異なります。

`direction` が `None` でない場合、指定された方向の隣接するエンティティを測定します。

ヒマワリの花びらの数を返します。
宝物やリンゴの次の位置を返します。
サボテンのサイズを返します。
カボチャの神秘的な数値を返します。
他のすべてのエンティティに対して `None` を返します。

実行に `1` ティックかかります。

例:
`num_petals = measure()`
@code_tooltip_leaderboard_run = `leaderboard_run(leaderboard, file_name, speedup)`
指定された `file_name` を開始点として使用して、`leaderboard` のための時間計測シミュレーションを開始します。
`speedup` は開始時のスピードアップを設定します。

`None` を返します。

実行に `200` ティックかかります。

例:
`leaderboard_run(Leaderboards.Fastest_Reset, "full_run", 256)`
@code_tooltip_simulate = `simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
指定された `filename` を開始点として使用して、ランキングのためのシミュレーションを開始します。

`sim_unlocks`: 開始時のアンロックを含むシーケンス。
`sim_items`: アイテムを量にマッピングする辞書。シミュレーションはこれらのアイテムで開始します。
`sim_globals`: 変数名を値にマッピングする辞書。シミュレーションはこれらの変数をグローバルスコープに設定して開始します。
`seed`: シミュレーションの乱数シード。正の整数でなければなりません。
`speedup`: 開始時のスピードアップ。

シミュレーションの実行にかかった時間を返します。

実行に `200` ティックかかります。

例:
`filename = "f1"
sim_unlocks = Unlocks
sim_items = {Items.Carrot : 10000, Items.Hay : 50}
sim_globals = {"a" : 13}
seed = 0
speedup = 64

run_time = simulate(filename, sim_unlocks, sim_items, sim_globals, seed, speedup)`
@code_tooltip_spawn_drone = `spawn_drone(function)`
`spawn_drone(function)` コマンドを実行したドローンと同じ位置に新しいドローンをスポーンします。新しいドローンは指定された関数の実行を開始します。完了後、自動的に消えます。

新しいドローンのハンドルを返します。すべてのドローンがすでにスポーンされている場合は `None` を返します。

ドローンがスポーンされた場合は `200` ティック、それ以外は `1` ティックかかります。

例:
`def harvest_column():
    for _ in range(get_world_size()):
        harvest()
        move(North)

while True:
    if spawn_drone(harvest_column):
        move(East)`

@code_tooltip_wait_for = `wait_for(drone)`
指定された `drone` が終了するまで待機します。

`drone` が実行していた関数の戻り値を返します。

待機対象の `drone` がすでに完了している場合は `1` ティックかかります。

例:
`def get_entity_type_in_direction(dir):
    move(dir)
    return get_entity_type()

def zero_arg_wrapper():
    return get_entity_type_in_direction(North)
handle = spawn_drone(zero_arg_wrapper)
print(wait_for(handle))`

@code_tooltip_has_finished = `has_finished(drone)`
指定された `drone` が終了したかどうかをチェックします。

`drone` が終了した場合は `True` を、それ以外の場合は `False` を返します。

実行に `1` ティックかかります。

例:
`drone = spawn_drone(function)
while not has_finished(drone):
    do_something_else()
result = wait_for(drone)`

@code_tooltip_max_drones = `max_drones()`

農場に配置できるドローンの最大数を返します。

実行に `1` ティックかかります。

例:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`

@code_tooltip_num_drones = `num_drones()`

現在農場にいるドローンの数を返します。

実行に `1` ティックかかります。

例:
`while num_drones() < max_drones():
    spawn_drone("some_file_name")
    move(East)`

@code_tooltip_quick_print = `quick_print(*args)`
`print(*args)` と同様に値を表示しますが、空中に書き込むために停止しないため、出力ページでしか確認できません。

`None` を返します。

実行に `0` ティックかかります。

例:
`quick_print("テスト")`
@code_tooltip_change_hat = `change_hat(hat)`
ドローンの帽子を `hat` に変更します。

`None` を返します。

実行に `200` ティックかかります。

例:
`change_hat(Hats.Dinosaur_Hat)`

@code_tooltip_max = `max(*args)`
一連の要素または渡された複数の引数の最大値を取得します。
数値と文字列に使用できます。

`max(a,b,c)`: `a`、`b`、`c`の最大値を返します。
`max(sequence)`: シーケンス内のすべての値の最大値を返します。

実行には比較回数分のティックがかかります。

例:
`max([3,6,34,16])`
@code_tooltip_min = `min(*args)`
一連の要素または渡された複数の引数の最小値を取得します。
数値と文字列に使用できます。

`min(a,b,c)`: `a`、`b`、`c`の最小値を返します。
`min(sequence)`: シーケンス内のすべての値の最小値を返します。

実行には比較回数分のティックがかかります。

例:
`min([3,6,34,16])`
@code_tooltip_abs = `abs(number)`
数値の絶対値を計算します。

`number` が正の場合は `number` を、それ以外の場合は `-number` を返します。

実行に 1 ティックかかります。

例:
`abs(-69)`
@code_tooltip_random = `random()`
0（含む）と1（含まない）の間の乱数をサンプリングします。

乱数を返します。

実行に `1` ティックかかります。

例:
`def random_elem(list):
	index = random() * len(list) // 1
	return list[index]`
@code_tooltip_append = `list.append(element)` 
`element` を `list` の末尾に追加します。

`None` を返します。

実行に `1` ティックかかります。

例:
`list = []
list.append(1)`
@code_tooltip_add = `set.add(element)` 
`element` を `set` に追加します。

`None` を返します。

実行に `element size` ティックかかります。

例:
`set = {0}
set.add(1)`
@code_tooltip_remove = `collection.remove(element)` 
`collection` から 最初に現れた `element` を削除します。

`None` を返します。

セットの場合は `element size` ティック、リストの場合は比較回数 + シフト回数分のティックがかかります。

例:
`list = [True, False, None]
list.remove(False)`
@code_tooltip_pop = `collection.pop()` 
リストから最後の要素を、または辞書から指定された要素を削除します。
`list.pop(i)` は `list` のインデックス `i` の要素を削除します。

削除された要素を返します。

辞書の場合は `key size` ティック、リストの場合は `len(list) - i + 1` ティックかかります。

例:
`list = [True, False, None]
list.pop(0)`
@code_tooltip_insert = `list.insert(i, element)` 
`element` を `list` のインデックス `i` に挿入します。

`None` を返します。

`len(list) - i + 1` ティックかかります。

例:
`list = [1,2]
list.insert(0, 0)`
@code_tooltip_Items = インベントリに入る可能性のあるすべてのアイテムが含まれています。`for` ループで反復処理できます。
@code_tooltip_Entities = すべての植物タイプが含まれています。`for` ループで反復処理できます。
@code_tooltip_Grounds = すべての可能な地面タイプが含まれています。`for` ループで反復処理できます。
@code_tooltip_Unlocks = 研究メニューのすべてのアンロックとアップグレードが含まれています。`for` ループで反復処理できます。
@code_tooltip_Hats = すべての帽子タイプが含まれています。`for` ループで反復処理できます。
@code_tooltip_Leaderboards = すべてのランキングカテゴリーが含まれています。`for` ループで反復処理できます。
@code_tooltip_for = シーケンスのすべての要素を反復処理するループ。一部のプログラミング言語では「foreach」ループと呼ばれます。
@code_tooltip_while = 条件が偽になるまでループします。
@code_tooltip_def = 関数を定義します。
@code_tooltip_True = 常に真であるブール値。
@code_tooltip_False = 常に偽であるブール値。
@code_tooltip_if = 条件が `True` の場合にコードを実行します。
@code_tooltip_else = 前の `if` 条件が `False` だった場合にコードを実行します。
@code_tooltip_elif = 以下と同じことを行います。
`else:
    if condition:`
@code_tooltip_None = 値がないことを表す値。
@code_tooltip_continue = すぐに次のループ反復に進みます。ネストされたループがある場合、これは常に最も内側のループに影響します。
@code_tooltip_break = ループを抜け出し、ループの後のステートメントの実行を続けます。ネストされたループがある場合、これは常に最も内側のループに影響します。
@code_tooltip_North = 画面の上方向。画面を回転させていない場合に限ります。
@code_tooltip_East = 画面の右方向。画面を回転させていない場合に限ります。
@code_tooltip_South = 画面の下方向。画面を回転させていない場合に限ります。
@code_tooltip_West = 画面の左方向。画面を回転させていない場合に限ります。
@code_tooltip_not = `not True` は `False` であり、`not False` は `True` です。
@code_tooltip_and = 最初のオペランドを評価します。それが偽（`False`、`0`、空のコレクション）である場合、その値をすぐに返します（短絡評価します）。それ以外の場合、2番目のオペランドを評価して返します。
@code_tooltip_or = 最初のオペランドを評価します。それが真（`False`、`0`、空のコレクション）である場合、その値をすぐに返します（短絡評価します）。それ以外の場合、2番目のオペランドを評価して返します。
@code_tooltip_return = 関数から値を返すために使用されます。
@code_tooltip_pass = 何もしません。空のコードブロックは許可されていないため、役立つことがあります。